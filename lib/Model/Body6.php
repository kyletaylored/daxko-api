<?php
/**
 * Body6
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body6 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body6 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_6';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => '\Swagger\Client\Model\V3membershipcartIdmembersName',
        'email' => 'string',
        'gender' => 'string',
        'birth_date' => 'string',
        'primary_address' => '\Swagger\Client\Model\V3membershipcartIdmembersPrimaryAddress',
        'primary_phone' => '\Swagger\Client\Model\V3membershipcartIdmembersPrimaryPhone',
        'race' => 'string',
        'emergency_contact' => '\Swagger\Client\Model\V3membershipcartIdmembersEmergencyContact',
        'emergency_phone' => '\Swagger\Client\Model\V3membershipcartIdmembersEmergencyPhone'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'email' => null,
        'gender' => null,
        'birth_date' => null,
        'primary_address' => null,
        'primary_phone' => null,
        'race' => null,
        'emergency_contact' => null,
        'emergency_phone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'email' => 'email',
        'gender' => 'gender',
        'birth_date' => 'birth_date',
        'primary_address' => 'primary_address',
        'primary_phone' => 'primary_phone',
        'race' => 'race',
        'emergency_contact' => 'emergency_contact',
        'emergency_phone' => 'emergency_phone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'birth_date' => 'setBirthDate',
        'primary_address' => 'setPrimaryAddress',
        'primary_phone' => 'setPrimaryPhone',
        'race' => 'setRace',
        'emergency_contact' => 'setEmergencyContact',
        'emergency_phone' => 'setEmergencyPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'birth_date' => 'getBirthDate',
        'primary_address' => 'getPrimaryAddress',
        'primary_phone' => 'getPrimaryPhone',
        'race' => 'getRace',
        'emergency_contact' => 'getEmergencyContact',
        'emergency_phone' => 'getEmergencyPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GENDER_M = 'M';
    const GENDER_F = 'F';
    const GENDER_U = 'U';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_M,
            self::GENDER_F,
            self::GENDER_U,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['primary_address'] = isset($data['primary_address']) ? $data['primary_address'] : null;
        $this->container['primary_phone'] = isset($data['primary_phone']) ? $data['primary_phone'] : null;
        $this->container['race'] = isset($data['race']) ? $data['race'] : null;
        $this->container['emergency_contact'] = isset($data['emergency_contact']) ? $data['emergency_contact'] : null;
        $this->container['emergency_phone'] = isset($data['emergency_phone']) ? $data['emergency_phone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['birth_date'] === null) {
            $invalidProperties[] = "'birth_date' can't be null";
        }
        if ($this->container['primary_address'] === null) {
            $invalidProperties[] = "'primary_address' can't be null";
        }
        if ($this->container['primary_phone'] === null) {
            $invalidProperties[] = "'primary_phone' can't be null";
        }
        if ($this->container['race'] === null) {
            $invalidProperties[] = "'race' can't be null";
        }
        if ($this->container['emergency_contact'] === null) {
            $invalidProperties[] = "'emergency_contact' can't be null";
        }
        if ($this->container['emergency_phone'] === null) {
            $invalidProperties[] = "'emergency_phone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \Swagger\Client\Model\V3membershipcartIdmembersName
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Swagger\Client\Model\V3membershipcartIdmembersName $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Member's email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Member's gender.  Use `U` for unknown or unspecified.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string $birth_date Member's birth date
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets primary_address
     *
     * @return \Swagger\Client\Model\V3membershipcartIdmembersPrimaryAddress
     */
    public function getPrimaryAddress()
    {
        return $this->container['primary_address'];
    }

    /**
     * Sets primary_address
     *
     * @param \Swagger\Client\Model\V3membershipcartIdmembersPrimaryAddress $primary_address primary_address
     *
     * @return $this
     */
    public function setPrimaryAddress($primary_address)
    {
        $this->container['primary_address'] = $primary_address;

        return $this;
    }

    /**
     * Gets primary_phone
     *
     * @return \Swagger\Client\Model\V3membershipcartIdmembersPrimaryPhone
     */
    public function getPrimaryPhone()
    {
        return $this->container['primary_phone'];
    }

    /**
     * Sets primary_phone
     *
     * @param \Swagger\Client\Model\V3membershipcartIdmembersPrimaryPhone $primary_phone primary_phone
     *
     * @return $this
     */
    public function setPrimaryPhone($primary_phone)
    {
        $this->container['primary_phone'] = $primary_phone;

        return $this;
    }

    /**
     * Gets race
     *
     * @return string
     */
    public function getRace()
    {
        return $this->container['race'];
    }

    /**
     * Sets race
     *
     * @param string $race Member's race.  Use the values provided from the Get member questions API call.
     *
     * @return $this
     */
    public function setRace($race)
    {
        $this->container['race'] = $race;

        return $this;
    }

    /**
     * Gets emergency_contact
     *
     * @return \Swagger\Client\Model\V3membershipcartIdmembersEmergencyContact
     */
    public function getEmergencyContact()
    {
        return $this->container['emergency_contact'];
    }

    /**
     * Sets emergency_contact
     *
     * @param \Swagger\Client\Model\V3membershipcartIdmembersEmergencyContact $emergency_contact emergency_contact
     *
     * @return $this
     */
    public function setEmergencyContact($emergency_contact)
    {
        $this->container['emergency_contact'] = $emergency_contact;

        return $this;
    }

    /**
     * Gets emergency_phone
     *
     * @return \Swagger\Client\Model\V3membershipcartIdmembersEmergencyPhone
     */
    public function getEmergencyPhone()
    {
        return $this->container['emergency_phone'];
    }

    /**
     * Sets emergency_phone
     *
     * @param \Swagger\Client\Model\V3membershipcartIdmembersEmergencyPhone $emergency_phone emergency_phone
     *
     * @return $this
     */
    public function setEmergencyPhone($emergency_phone)
    {
        $this->container['emergency_phone'] = $emergency_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


