<?php
/**
 * InlineResponse20024
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20024 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20024 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_24';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'info' => '\Swagger\Client\Model\InlineResponse20023Info',
        'program' => '\Swagger\Client\Model\InlineResponse20024Program',
        'instances' => '\Swagger\Client\Model\InlineResponse20024Instances[]',
        'fees' => '\Swagger\Client\Model\InlineResponse20024Fees[]',
        'instructors' => '\Swagger\Client\Model\InlineResponse20024Instructors[]',
        'days' => '\Swagger\Client\Model\InlineResponse20024Days[]',
        'min_required_days' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'info' => null,
        'program' => null,
        'instances' => null,
        'fees' => null,
        'instructors' => null,
        'days' => null,
        'min_required_days' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'info' => 'info',
        'program' => 'program',
        'instances' => 'instances',
        'fees' => 'fees',
        'instructors' => 'instructors',
        'days' => 'days',
        'min_required_days' => 'min_required_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'info' => 'setInfo',
        'program' => 'setProgram',
        'instances' => 'setInstances',
        'fees' => 'setFees',
        'instructors' => 'setInstructors',
        'days' => 'setDays',
        'min_required_days' => 'setMinRequiredDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'info' => 'getInfo',
        'program' => 'getProgram',
        'instances' => 'getInstances',
        'fees' => 'getFees',
        'instructors' => 'getInstructors',
        'days' => 'getDays',
        'min_required_days' => 'getMinRequiredDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['instances'] = isset($data['instances']) ? $data['instances'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['instructors'] = isset($data['instructors']) ? $data['instructors'] : null;
        $this->container['days'] = isset($data['days']) ? $data['days'] : null;
        $this->container['min_required_days'] = isset($data['min_required_days']) ? $data['min_required_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['info'] === null) {
            $invalidProperties[] = "'info' can't be null";
        }
        if ($this->container['program'] === null) {
            $invalidProperties[] = "'program' can't be null";
        }
        if ($this->container['instances'] === null) {
            $invalidProperties[] = "'instances' can't be null";
        }
        if ($this->container['fees'] === null) {
            $invalidProperties[] = "'fees' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets info
     *
     * @return \Swagger\Client\Model\InlineResponse20023Info
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param \Swagger\Client\Model\InlineResponse20023Info $info info
     *
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \Swagger\Client\Model\InlineResponse20024Program
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \Swagger\Client\Model\InlineResponse20024Program $program program
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets instances
     *
     * @return \Swagger\Client\Model\InlineResponse20024Instances[]
     */
    public function getInstances()
    {
        return $this->container['instances'];
    }

    /**
     * Sets instances
     *
     * @param \Swagger\Client\Model\InlineResponse20024Instances[] $instances Instances
     *
     * @return $this
     */
    public function setInstances($instances)
    {
        $this->container['instances'] = $instances;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \Swagger\Client\Model\InlineResponse20024Fees[]
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \Swagger\Client\Model\InlineResponse20024Fees[] $fees Fees that will be charged automaticaly (for example, registration fee)
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets instructors
     *
     * @return \Swagger\Client\Model\InlineResponse20024Instructors[]
     */
    public function getInstructors()
    {
        return $this->container['instructors'];
    }

    /**
     * Sets instructors
     *
     * @param \Swagger\Client\Model\InlineResponse20024Instructors[] $instructors Available instructors to choose from (property will only exist if `program.type` is `package`)
     *
     * @return $this
     */
    public function setInstructors($instructors)
    {
        $this->container['instructors'] = $instructors;

        return $this;
    }

    /**
     * Gets days
     *
     * @return \Swagger\Client\Model\InlineResponse20024Days[]
     */
    public function getDays()
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param \Swagger\Client\Model\InlineResponse20024Days[] $days Day options to choose from when registering for a child care program (property will only exist if `program.type` is `child_care`)
     *
     * @return $this
     */
    public function setDays($days)
    {
        $this->container['days'] = $days;

        return $this;
    }

    /**
     * Gets min_required_days
     *
     * @return float
     */
    public function getMinRequiredDays()
    {
        return $this->container['min_required_days'];
    }

    /**
     * Sets min_required_days
     *
     * @param float $min_required_days Minimum required days that must be chosen in order to register.  This property will only exist if `program.type` is `child_care`.
     *
     * @return $this
     */
    public function setMinRequiredDays($min_required_days)
    {
        $this->container['min_required_days'] = $min_required_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


