<?php
/**
 * InlineResponse20030
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20030 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20030 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_30';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'line_items' => '\Swagger\Client\Model\InlineResponse20030LineItems[]',
        'line_item_payments' => '\Swagger\Client\Model\InlineResponse20030LineItemPayments[]',
        'product_bundles' => '\Swagger\Client\Model\InlineResponse20030ProductBundles[]',
        'require_payment_method' => 'bool',
        'max_payment_method_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'line_items' => null,
        'line_item_payments' => null,
        'product_bundles' => null,
        'require_payment_method' => null,
        'max_payment_method_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'line_items' => 'line_items',
        'line_item_payments' => 'line_item_payments',
        'product_bundles' => 'product_bundles',
        'require_payment_method' => 'require_payment_method',
        'max_payment_method_amount' => 'max_payment_method_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'line_items' => 'setLineItems',
        'line_item_payments' => 'setLineItemPayments',
        'product_bundles' => 'setProductBundles',
        'require_payment_method' => 'setRequirePaymentMethod',
        'max_payment_method_amount' => 'setMaxPaymentMethodAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'line_items' => 'getLineItems',
        'line_item_payments' => 'getLineItemPayments',
        'product_bundles' => 'getProductBundles',
        'require_payment_method' => 'getRequirePaymentMethod',
        'max_payment_method_amount' => 'getMaxPaymentMethodAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['line_item_payments'] = isset($data['line_item_payments']) ? $data['line_item_payments'] : null;
        $this->container['product_bundles'] = isset($data['product_bundles']) ? $data['product_bundles'] : null;
        $this->container['require_payment_method'] = isset($data['require_payment_method']) ? $data['require_payment_method'] : null;
        $this->container['max_payment_method_amount'] = isset($data['max_payment_method_amount']) ? $data['max_payment_method_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['line_items'] === null) {
            $invalidProperties[] = "'line_items' can't be null";
        }
        if ($this->container['line_item_payments'] === null) {
            $invalidProperties[] = "'line_item_payments' can't be null";
        }
        if ($this->container['product_bundles'] === null) {
            $invalidProperties[] = "'product_bundles' can't be null";
        }
        if ($this->container['require_payment_method'] === null) {
            $invalidProperties[] = "'require_payment_method' can't be null";
        }
        if ($this->container['max_payment_method_amount'] === null) {
            $invalidProperties[] = "'max_payment_method_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The cart `version` serves as a verification value that an order has been reviewed before being finalized. It will need to be passed into the cart checkout API call.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Swagger\Client\Model\InlineResponse20030LineItems[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Swagger\Client\Model\InlineResponse20030LineItems[] $line_items A list of line items that have been added to the cart
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets line_item_payments
     *
     * @return \Swagger\Client\Model\InlineResponse20030LineItemPayments[]
     */
    public function getLineItemPayments()
    {
        return $this->container['line_item_payments'];
    }

    /**
     * Sets line_item_payments
     *
     * @param \Swagger\Client\Model\InlineResponse20030LineItemPayments[] $line_item_payments A list of the amount that will be paid for each line item. This is provided for convenience so that it doesn't have to be manually constructed. However, for more advanced payment scenarios (if your application wants to specify per line item payments), your application will need to construct it. It will be required for the finalize payment API call.
     *
     * @return $this
     */
    public function setLineItemPayments($line_item_payments)
    {
        $this->container['line_item_payments'] = $line_item_payments;

        return $this;
    }

    /**
     * Gets product_bundles
     *
     * @return \Swagger\Client\Model\InlineResponse20030ProductBundles[]
     */
    public function getProductBundles()
    {
        return $this->container['product_bundles'];
    }

    /**
     * Sets product_bundles
     *
     * @param \Swagger\Client\Model\InlineResponse20030ProductBundles[] $product_bundles List of all product bundles in the cart.  Use the `product_bundle_id` in the `line_items` collection to reference the product bundle.
     *
     * @return $this
     */
    public function setProductBundles($product_bundles)
    {
        $this->container['product_bundles'] = $product_bundles;

        return $this;
    }

    /**
     * Gets require_payment_method
     *
     * @return bool
     */
    public function getRequirePaymentMethod()
    {
        return $this->container['require_payment_method'];
    }

    /**
     * Sets require_payment_method
     *
     * @param bool $require_payment_method Indicates if the cart requires payment now or at some point in the future.
     *
     * @return $this
     */
    public function setRequirePaymentMethod($require_payment_method)
    {
        $this->container['require_payment_method'] = $require_payment_method;

        return $this;
    }

    /**
     * Gets max_payment_method_amount
     *
     * @return float
     */
    public function getMaxPaymentMethodAmount()
    {
        return $this->container['max_payment_method_amount'];
    }

    /**
     * Sets max_payment_method_amount
     *
     * @param float $max_payment_method_amount Indicates the max amount that can be applied to the entire cart. This can be used for validation purposes to ensure that an error is not returned from the API for specifying an amount that exceeds the total amount.
     *
     * @return $this
     */
    public function setMaxPaymentMethodAmount($max_payment_method_amount)
    {
        $this->container['max_payment_method_amount'] = $max_payment_method_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


