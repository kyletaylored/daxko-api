<?php
/**
 * InlineResponse20010
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20010 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20010 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recurring_fees' => '\Swagger\Client\Model\InlineResponse20010RecurringFees[]',
        'one_time_fees' => '\Swagger\Client\Model\InlineResponse20010OneTimeFees[]',
        'version' => 'string',
        'membership_type' => '\Swagger\Client\Model\InlineResponse20010MembershipType',
        'applied_discount_group_ids' => 'string[]',
        'home_branch' => '\Swagger\Client\Model\InlineResponse20010HomeBranch',
        'billing_cycle' => '\Swagger\Client\Model\InlineResponse20010BillingCycle',
        'billing_cyles' => '\Swagger\Client\Model\InlineResponse20010BillingCycle[]',
        'draft_day' => 'int',
        'draft_days' => '\Swagger\Client\Model\InlineResponse20010DraftDays[]',
        'auto_renew' => 'bool',
        'next_process_date' => 'string',
        'expiration_date' => 'string',
        'renew' => 'bool',
        'members' => '\Swagger\Client\Model\InlineResponse20010Members[]',
        'age_group_rules' => '\Swagger\Client\Model\InlineResponse20010AgeGroupRules',
        'allow_payment' => 'bool',
        'valid' => 'bool',
        'errors' => '\Swagger\Client\Model\InlineResponse20010Errors[]',
        'steps' => '\Swagger\Client\Model\InlineResponse20010Steps'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recurring_fees' => null,
        'one_time_fees' => null,
        'version' => null,
        'membership_type' => null,
        'applied_discount_group_ids' => null,
        'home_branch' => null,
        'billing_cycle' => null,
        'billing_cyles' => null,
        'draft_day' => null,
        'draft_days' => null,
        'auto_renew' => null,
        'next_process_date' => null,
        'expiration_date' => 'datetime',
        'renew' => null,
        'members' => null,
        'age_group_rules' => null,
        'allow_payment' => null,
        'valid' => null,
        'errors' => null,
        'steps' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recurring_fees' => 'recurring_fees',
        'one_time_fees' => 'one_time_fees',
        'version' => 'version',
        'membership_type' => 'membership_type',
        'applied_discount_group_ids' => 'applied_discount_group_ids',
        'home_branch' => 'home_branch',
        'billing_cycle' => 'billing_cycle',
        'billing_cyles' => 'billing_cyles',
        'draft_day' => 'draft_day',
        'draft_days' => 'draft_days',
        'auto_renew' => 'auto_renew',
        'next_process_date' => 'next_process_date',
        'expiration_date' => 'expiration_date',
        'renew' => 'renew',
        'members' => 'members',
        'age_group_rules' => 'age_group_rules',
        'allow_payment' => 'allow_payment',
        'valid' => 'valid',
        'errors' => 'errors',
        'steps' => 'steps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recurring_fees' => 'setRecurringFees',
        'one_time_fees' => 'setOneTimeFees',
        'version' => 'setVersion',
        'membership_type' => 'setMembershipType',
        'applied_discount_group_ids' => 'setAppliedDiscountGroupIds',
        'home_branch' => 'setHomeBranch',
        'billing_cycle' => 'setBillingCycle',
        'billing_cyles' => 'setBillingCyles',
        'draft_day' => 'setDraftDay',
        'draft_days' => 'setDraftDays',
        'auto_renew' => 'setAutoRenew',
        'next_process_date' => 'setNextProcessDate',
        'expiration_date' => 'setExpirationDate',
        'renew' => 'setRenew',
        'members' => 'setMembers',
        'age_group_rules' => 'setAgeGroupRules',
        'allow_payment' => 'setAllowPayment',
        'valid' => 'setValid',
        'errors' => 'setErrors',
        'steps' => 'setSteps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recurring_fees' => 'getRecurringFees',
        'one_time_fees' => 'getOneTimeFees',
        'version' => 'getVersion',
        'membership_type' => 'getMembershipType',
        'applied_discount_group_ids' => 'getAppliedDiscountGroupIds',
        'home_branch' => 'getHomeBranch',
        'billing_cycle' => 'getBillingCycle',
        'billing_cyles' => 'getBillingCyles',
        'draft_day' => 'getDraftDay',
        'draft_days' => 'getDraftDays',
        'auto_renew' => 'getAutoRenew',
        'next_process_date' => 'getNextProcessDate',
        'expiration_date' => 'getExpirationDate',
        'renew' => 'getRenew',
        'members' => 'getMembers',
        'age_group_rules' => 'getAgeGroupRules',
        'allow_payment' => 'getAllowPayment',
        'valid' => 'getValid',
        'errors' => 'getErrors',
        'steps' => 'getSteps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recurring_fees'] = isset($data['recurring_fees']) ? $data['recurring_fees'] : null;
        $this->container['one_time_fees'] = isset($data['one_time_fees']) ? $data['one_time_fees'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['membership_type'] = isset($data['membership_type']) ? $data['membership_type'] : null;
        $this->container['applied_discount_group_ids'] = isset($data['applied_discount_group_ids']) ? $data['applied_discount_group_ids'] : null;
        $this->container['home_branch'] = isset($data['home_branch']) ? $data['home_branch'] : null;
        $this->container['billing_cycle'] = isset($data['billing_cycle']) ? $data['billing_cycle'] : null;
        $this->container['billing_cyles'] = isset($data['billing_cyles']) ? $data['billing_cyles'] : null;
        $this->container['draft_day'] = isset($data['draft_day']) ? $data['draft_day'] : null;
        $this->container['draft_days'] = isset($data['draft_days']) ? $data['draft_days'] : null;
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['next_process_date'] = isset($data['next_process_date']) ? $data['next_process_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['renew'] = isset($data['renew']) ? $data['renew'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
        $this->container['age_group_rules'] = isset($data['age_group_rules']) ? $data['age_group_rules'] : null;
        $this->container['allow_payment'] = isset($data['allow_payment']) ? $data['allow_payment'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recurring_fees'] === null) {
            $invalidProperties[] = "'recurring_fees' can't be null";
        }
        if ($this->container['one_time_fees'] === null) {
            $invalidProperties[] = "'one_time_fees' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['membership_type'] === null) {
            $invalidProperties[] = "'membership_type' can't be null";
        }
        if ($this->container['applied_discount_group_ids'] === null) {
            $invalidProperties[] = "'applied_discount_group_ids' can't be null";
        }
        if ($this->container['home_branch'] === null) {
            $invalidProperties[] = "'home_branch' can't be null";
        }
        if ($this->container['billing_cycle'] === null) {
            $invalidProperties[] = "'billing_cycle' can't be null";
        }
        if ($this->container['billing_cyles'] === null) {
            $invalidProperties[] = "'billing_cyles' can't be null";
        }
        if ($this->container['draft_day'] === null) {
            $invalidProperties[] = "'draft_day' can't be null";
        }
        if ($this->container['draft_days'] === null) {
            $invalidProperties[] = "'draft_days' can't be null";
        }
        if ($this->container['auto_renew'] === null) {
            $invalidProperties[] = "'auto_renew' can't be null";
        }
        if ($this->container['next_process_date'] === null) {
            $invalidProperties[] = "'next_process_date' can't be null";
        }
        if ($this->container['renew'] === null) {
            $invalidProperties[] = "'renew' can't be null";
        }
        if ($this->container['members'] === null) {
            $invalidProperties[] = "'members' can't be null";
        }
        if ($this->container['age_group_rules'] === null) {
            $invalidProperties[] = "'age_group_rules' can't be null";
        }
        if ($this->container['allow_payment'] === null) {
            $invalidProperties[] = "'allow_payment' can't be null";
        }
        if ($this->container['valid'] === null) {
            $invalidProperties[] = "'valid' can't be null";
        }
        if ($this->container['errors'] === null) {
            $invalidProperties[] = "'errors' can't be null";
        }
        if ($this->container['steps'] === null) {
            $invalidProperties[] = "'steps' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recurring_fees
     *
     * @return \Swagger\Client\Model\InlineResponse20010RecurringFees[]
     */
    public function getRecurringFees()
    {
        return $this->container['recurring_fees'];
    }

    /**
     * Sets recurring_fees
     *
     * @param \Swagger\Client\Model\InlineResponse20010RecurringFees[] $recurring_fees Fees that will be charged in the future on a recurring basis (see `billing_cycle` for frequency)
     *
     * @return $this
     */
    public function setRecurringFees($recurring_fees)
    {
        $this->container['recurring_fees'] = $recurring_fees;

        return $this;
    }

    /**
     * Gets one_time_fees
     *
     * @return \Swagger\Client\Model\InlineResponse20010OneTimeFees[]
     */
    public function getOneTimeFees()
    {
        return $this->container['one_time_fees'];
    }

    /**
     * Sets one_time_fees
     *
     * @param \Swagger\Client\Model\InlineResponse20010OneTimeFees[] $one_time_fees Fees that will be charged immediately at time of checkout (but might not be due immediately - see `one_time_fees.due_today_amount`)
     *
     * @return $this
     */
    public function setOneTimeFees($one_time_fees)
    {
        $this->container['one_time_fees'] = $one_time_fees;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The cart `version` serves as a verification value that an order has been reviewed before being finalized.  It will need to be passed into the membership checkout API call.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets membership_type
     *
     * @return \Swagger\Client\Model\InlineResponse20010MembershipType
     */
    public function getMembershipType()
    {
        return $this->container['membership_type'];
    }

    /**
     * Sets membership_type
     *
     * @param \Swagger\Client\Model\InlineResponse20010MembershipType $membership_type membership_type
     *
     * @return $this
     */
    public function setMembershipType($membership_type)
    {
        $this->container['membership_type'] = $membership_type;

        return $this;
    }

    /**
     * Gets applied_discount_group_ids
     *
     * @return string[]
     */
    public function getAppliedDiscountGroupIds()
    {
        return $this->container['applied_discount_group_ids'];
    }

    /**
     * Sets applied_discount_group_ids
     *
     * @param string[] $applied_discount_group_ids List of discount group ids that have been applied to this cart.
     *
     * @return $this
     */
    public function setAppliedDiscountGroupIds($applied_discount_group_ids)
    {
        $this->container['applied_discount_group_ids'] = $applied_discount_group_ids;

        return $this;
    }

    /**
     * Gets home_branch
     *
     * @return \Swagger\Client\Model\InlineResponse20010HomeBranch
     */
    public function getHomeBranch()
    {
        return $this->container['home_branch'];
    }

    /**
     * Sets home_branch
     *
     * @param \Swagger\Client\Model\InlineResponse20010HomeBranch $home_branch home_branch
     *
     * @return $this
     */
    public function setHomeBranch($home_branch)
    {
        $this->container['home_branch'] = $home_branch;

        return $this;
    }

    /**
     * Gets billing_cycle
     *
     * @return \Swagger\Client\Model\InlineResponse20010BillingCycle
     */
    public function getBillingCycle()
    {
        return $this->container['billing_cycle'];
    }

    /**
     * Sets billing_cycle
     *
     * @param \Swagger\Client\Model\InlineResponse20010BillingCycle $billing_cycle billing_cycle
     *
     * @return $this
     */
    public function setBillingCycle($billing_cycle)
    {
        $this->container['billing_cycle'] = $billing_cycle;

        return $this;
    }

    /**
     * Gets billing_cyles
     *
     * @return \Swagger\Client\Model\InlineResponse20010BillingCycle[]
     */
    public function getBillingCyles()
    {
        return $this->container['billing_cyles'];
    }

    /**
     * Sets billing_cyles
     *
     * @param \Swagger\Client\Model\InlineResponse20010BillingCycle[] $billing_cyles List of available billing cycles
     *
     * @return $this
     */
    public function setBillingCyles($billing_cyles)
    {
        $this->container['billing_cyles'] = $billing_cyles;

        return $this;
    }

    /**
     * Gets draft_day
     *
     * @return int
     */
    public function getDraftDay()
    {
        return $this->container['draft_day'];
    }

    /**
     * Sets draft_day
     *
     * @param int $draft_day Selected draft day (day of month)
     *
     * @return $this
     */
    public function setDraftDay($draft_day)
    {
        $this->container['draft_day'] = $draft_day;

        return $this;
    }

    /**
     * Gets draft_days
     *
     * @return \Swagger\Client\Model\InlineResponse20010DraftDays[]
     */
    public function getDraftDays()
    {
        return $this->container['draft_days'];
    }

    /**
     * Sets draft_days
     *
     * @param \Swagger\Client\Model\InlineResponse20010DraftDays[] $draft_days List of available draft days
     *
     * @return $this
     */
    public function setDraftDays($draft_days)
    {
        $this->container['draft_days'] = $draft_days;

        return $this;
    }

    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew Valie is `true` if the membership is set to auto renew.
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets next_process_date
     *
     * @return string
     */
    public function getNextProcessDate()
    {
        return $this->container['next_process_date'];
    }

    /**
     * Sets next_process_date
     *
     * @param string $next_process_date Date when next `recurring_fees` will be converted to actual fees.
     *
     * @return $this
     */
    public function setNextProcessDate($next_process_date)
    {
        $this->container['next_process_date'] = $next_process_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string $expiration_date When `auto_renew` is true, this property will not exist because there is no expiration date.  When `auto_renew` is false, this will be when the membership will expire.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets renew
     *
     * @return bool
     */
    public function getRenew()
    {
        return $this->container['renew'];
    }

    /**
     * Sets renew
     *
     * @param bool $renew Value is `true` if this cart is in the mode of renewing a unit (vs. joining)
     *
     * @return $this
     */
    public function setRenew($renew)
    {
        $this->container['renew'] = $renew;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \Swagger\Client\Model\InlineResponse20010Members[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \Swagger\Client\Model\InlineResponse20010Members[] $members Members that are in the cart
     *
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets age_group_rules
     *
     * @return \Swagger\Client\Model\InlineResponse20010AgeGroupRules
     */
    public function getAgeGroupRules()
    {
        return $this->container['age_group_rules'];
    }

    /**
     * Sets age_group_rules
     *
     * @param \Swagger\Client\Model\InlineResponse20010AgeGroupRules $age_group_rules age_group_rules
     *
     * @return $this
     */
    public function setAgeGroupRules($age_group_rules)
    {
        $this->container['age_group_rules'] = $age_group_rules;

        return $this;
    }

    /**
     * Gets allow_payment
     *
     * @return bool
     */
    public function getAllowPayment()
    {
        return $this->container['allow_payment'];
    }

    /**
     * Sets allow_payment
     *
     * @param bool $allow_payment Value is `true` if a payment method can be supplied.  For example, if the membership is free after discounts have been applied and all recurring fees will be free in the future, the value will be `false`.
     *
     * @return $this
     */
    public function setAllowPayment($allow_payment)
    {
        $this->container['allow_payment'] = $allow_payment;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid Value is `true` if there are no `errors` and all `age_group_rules` are valid.
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \Swagger\Client\Model\InlineResponse20010Errors[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \Swagger\Client\Model\InlineResponse20010Errors[] $errors Any errors that must be resolved before checkout can complete
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \Swagger\Client\Model\InlineResponse20010Steps
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \Swagger\Client\Model\InlineResponse20010Steps $steps steps
     *
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


