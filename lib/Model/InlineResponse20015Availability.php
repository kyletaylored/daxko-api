<?php
/**
 * InlineResponse20015Availability
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20015Availability Class Doc Comment
 *
 * @category Class
 * @description Availability
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20015Availability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_15_availability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'limited' => 'bool',
        'full' => 'bool',
        'max' => 'int',
        'taken' => 'int',
        'available' => 'int',
        'has_waiting_list' => 'bool',
        'waiting_list_count' => 'int',
        'show_waiting_list_count' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'limited' => null,
        'full' => null,
        'max' => null,
        'taken' => null,
        'available' => null,
        'has_waiting_list' => null,
        'waiting_list_count' => null,
        'show_waiting_list_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'limited' => 'limited',
        'full' => 'full',
        'max' => 'max',
        'taken' => 'taken',
        'available' => 'available',
        'has_waiting_list' => 'has_waiting_list',
        'waiting_list_count' => 'waiting_list_count',
        'show_waiting_list_count' => 'show_waiting_list_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'limited' => 'setLimited',
        'full' => 'setFull',
        'max' => 'setMax',
        'taken' => 'setTaken',
        'available' => 'setAvailable',
        'has_waiting_list' => 'setHasWaitingList',
        'waiting_list_count' => 'setWaitingListCount',
        'show_waiting_list_count' => 'setShowWaitingListCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'limited' => 'getLimited',
        'full' => 'getFull',
        'max' => 'getMax',
        'taken' => 'getTaken',
        'available' => 'getAvailable',
        'has_waiting_list' => 'getHasWaitingList',
        'waiting_list_count' => 'getWaitingListCount',
        'show_waiting_list_count' => 'getShowWaitingListCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['limited'] = isset($data['limited']) ? $data['limited'] : null;
        $this->container['full'] = isset($data['full']) ? $data['full'] : null;
        $this->container['max'] = isset($data['max']) ? $data['max'] : null;
        $this->container['taken'] = isset($data['taken']) ? $data['taken'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['has_waiting_list'] = isset($data['has_waiting_list']) ? $data['has_waiting_list'] : null;
        $this->container['waiting_list_count'] = isset($data['waiting_list_count']) ? $data['waiting_list_count'] : null;
        $this->container['show_waiting_list_count'] = isset($data['show_waiting_list_count']) ? $data['show_waiting_list_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['limited'] === null) {
            $invalidProperties[] = "'limited' can't be null";
        }
        if ($this->container['full'] === null) {
            $invalidProperties[] = "'full' can't be null";
        }
        if ($this->container['taken'] === null) {
            $invalidProperties[] = "'taken' can't be null";
        }
        if ($this->container['has_waiting_list'] === null) {
            $invalidProperties[] = "'has_waiting_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets limited
     *
     * @return bool
     */
    public function getLimited()
    {
        return $this->container['limited'];
    }

    /**
     * Sets limited
     *
     * @param bool $limited If true, then there is a limit to number of seats available.
     *
     * @return $this
     */
    public function setLimited($limited)
    {
        $this->container['limited'] = $limited;

        return $this;
    }

    /**
     * Gets full
     *
     * @return bool
     */
    public function getFull()
    {
        return $this->container['full'];
    }

    /**
     * Sets full
     *
     * @param bool $full If true, there are no spots available.
     *
     * @return $this
     */
    public function setFull($full)
    {
        $this->container['full'] = $full;

        return $this;
    }

    /**
     * Gets max
     *
     * @return int
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param int $max If `limited` is true, then this property will exist and indicate the maximum number of seats.  If limited is false, then this property will not exist.
     *
     * @return $this
     */
    public function setMax($max)
    {
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets taken
     *
     * @return int
     */
    public function getTaken()
    {
        return $this->container['taken'];
    }

    /**
     * Sets taken
     *
     * @param int $taken Number of seats taken.  (NOTE: For child care programs, this value is always -1 to indicate that the value is unavailable at this level since child care seat counts are calculated at the instance level once a registration has been started.  You should use the `registration_summaries.can_register` flag to control whether a registration can be started.)
     *
     * @return $this
     */
    public function setTaken($taken)
    {
        $this->container['taken'] = $taken;

        return $this;
    }

    /**
     * Gets available
     *
     * @return int
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param int $available If `limited` is true, then this indicates the number of seats available.  If limited is false, then this property does not exist.  (NOTE: For child care programs, this value is always -1 to indicate that the value is unavailable at this level since child care seat counts are calculated at the instance level once a registration has been started.  You should use the `registration_summaries.can_register` flag to control whether a registration can be started.)
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets has_waiting_list
     *
     * @return bool
     */
    public function getHasWaitingList()
    {
        return $this->container['has_waiting_list'];
    }

    /**
     * Sets has_waiting_list
     *
     * @param bool $has_waiting_list If `limited` is true, then this indicates whether a waiting list is available once the maximum number of seats has been reached.
     *
     * @return $this
     */
    public function setHasWaitingList($has_waiting_list)
    {
        $this->container['has_waiting_list'] = $has_waiting_list;

        return $this;
    }

    /**
     * Gets waiting_list_count
     *
     * @return int
     */
    public function getWaitingListCount()
    {
        return $this->container['waiting_list_count'];
    }

    /**
     * Sets waiting_list_count
     *
     * @param int $waiting_list_count If `has_waiting_list` is true, then this indicates how many members are on the waiting list.
     *
     * @return $this
     */
    public function setWaitingListCount($waiting_list_count)
    {
        $this->container['waiting_list_count'] = $waiting_list_count;

        return $this;
    }

    /**
     * Gets show_waiting_list_count
     *
     * @return bool
     */
    public function getShowWaitingListCount()
    {
        return $this->container['show_waiting_list_count'];
    }

    /**
     * Sets show_waiting_list_count
     *
     * @param bool $show_waiting_list_count If `has_waiting_list` is true, then this indicates whether the offering should display the waiting list count. This is currently only available for traditional program offerings.
     *
     * @return $this
     */
    public function setShowWaitingListCount($show_waiting_list_count)
    {
        $this->container['show_waiting_list_count'] = $show_waiting_list_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


