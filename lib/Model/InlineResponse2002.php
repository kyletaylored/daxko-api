<?php
/**
 * InlineResponse2002
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'addresses' => '\Swagger\Client\Model\InlineResponse2002Addresses[]',
        'barcode' => 'string',
        'date_of_birth' => 'string',
        'emails' => '\Swagger\Client\Model\InlineResponse2002Emails[]',
        'gender' => '\Swagger\Client\Model\InlineResponse2002Gender',
        'home_location' => '\Swagger\Client\Model\InlineResponse2002HomeLocation',
        'join_date' => 'string',
        'member_id' => 'string',
        'member_type' => 'string',
        'member_unit_id' => 'string',
        'most_recent_join_date' => 'string',
        'name' => '\Swagger\Client\Model\InlineResponse2002Name',
        'phones' => '\Swagger\Client\Model\InlineResponse2002Phones[]',
        'photos' => '\Swagger\Client\Model\InlineResponse2002Photos[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'addresses' => null,
        'barcode' => null,
        'date_of_birth' => 'datetime',
        'emails' => null,
        'gender' => null,
        'home_location' => null,
        'join_date' => 'datetime',
        'member_id' => null,
        'member_type' => null,
        'member_unit_id' => null,
        'most_recent_join_date' => 'datetime',
        'name' => null,
        'phones' => null,
        'photos' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'addresses' => 'addresses',
        'barcode' => 'barcode',
        'date_of_birth' => 'date_of_birth',
        'emails' => 'emails',
        'gender' => 'gender',
        'home_location' => 'home_location',
        'join_date' => 'join_date',
        'member_id' => 'member_id',
        'member_type' => 'member_type',
        'member_unit_id' => 'member_unit_id',
        'most_recent_join_date' => 'most_recent_join_date',
        'name' => 'name',
        'phones' => 'phones',
        'photos' => 'photos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'addresses' => 'setAddresses',
        'barcode' => 'setBarcode',
        'date_of_birth' => 'setDateOfBirth',
        'emails' => 'setEmails',
        'gender' => 'setGender',
        'home_location' => 'setHomeLocation',
        'join_date' => 'setJoinDate',
        'member_id' => 'setMemberId',
        'member_type' => 'setMemberType',
        'member_unit_id' => 'setMemberUnitId',
        'most_recent_join_date' => 'setMostRecentJoinDate',
        'name' => 'setName',
        'phones' => 'setPhones',
        'photos' => 'setPhotos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'addresses' => 'getAddresses',
        'barcode' => 'getBarcode',
        'date_of_birth' => 'getDateOfBirth',
        'emails' => 'getEmails',
        'gender' => 'getGender',
        'home_location' => 'getHomeLocation',
        'join_date' => 'getJoinDate',
        'member_id' => 'getMemberId',
        'member_type' => 'getMemberType',
        'member_unit_id' => 'getMemberUnitId',
        'most_recent_join_date' => 'getMostRecentJoinDate',
        'name' => 'getName',
        'phones' => 'getPhones',
        'photos' => 'getPhotos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['home_location'] = isset($data['home_location']) ? $data['home_location'] : null;
        $this->container['join_date'] = isset($data['join_date']) ? $data['join_date'] : null;
        $this->container['member_id'] = isset($data['member_id']) ? $data['member_id'] : null;
        $this->container['member_type'] = isset($data['member_type']) ? $data['member_type'] : null;
        $this->container['member_unit_id'] = isset($data['member_unit_id']) ? $data['member_unit_id'] : null;
        $this->container['most_recent_join_date'] = isset($data['most_recent_join_date']) ? $data['most_recent_join_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['photos'] = isset($data['photos']) ? $data['photos'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if ($this->container['barcode'] === null) {
            $invalidProperties[] = "'barcode' can't be null";
        }
        if ($this->container['date_of_birth'] === null) {
            $invalidProperties[] = "'date_of_birth' can't be null";
        }
        if ($this->container['emails'] === null) {
            $invalidProperties[] = "'emails' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if ($this->container['home_location'] === null) {
            $invalidProperties[] = "'home_location' can't be null";
        }
        if ($this->container['join_date'] === null) {
            $invalidProperties[] = "'join_date' can't be null";
        }
        if ($this->container['member_id'] === null) {
            $invalidProperties[] = "'member_id' can't be null";
        }
        if ($this->container['member_type'] === null) {
            $invalidProperties[] = "'member_type' can't be null";
        }
        if ($this->container['member_unit_id'] === null) {
            $invalidProperties[] = "'member_unit_id' can't be null";
        }
        if ($this->container['most_recent_join_date'] === null) {
            $invalidProperties[] = "'most_recent_join_date' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['phones'] === null) {
            $invalidProperties[] = "'phones' can't be null";
        }
        if ($this->container['photos'] === null) {
            $invalidProperties[] = "'photos' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Indicates if the member has an active membership
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Swagger\Client\Model\InlineResponse2002Addresses[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Swagger\Client\Model\InlineResponse2002Addresses[] $addresses A list of member addressess
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode The barcode value that is encoded by the member's membership card
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth The member's date of birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Swagger\Client\Model\InlineResponse2002Emails[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Swagger\Client\Model\InlineResponse2002Emails[] $emails A list of member addresses
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Swagger\Client\Model\InlineResponse2002Gender
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Swagger\Client\Model\InlineResponse2002Gender $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets home_location
     *
     * @return \Swagger\Client\Model\InlineResponse2002HomeLocation
     */
    public function getHomeLocation()
    {
        return $this->container['home_location'];
    }

    /**
     * Sets home_location
     *
     * @param \Swagger\Client\Model\InlineResponse2002HomeLocation $home_location home_location
     *
     * @return $this
     */
    public function setHomeLocation($home_location)
    {
        $this->container['home_location'] = $home_location;

        return $this;
    }

    /**
     * Gets join_date
     *
     * @return string
     */
    public function getJoinDate()
    {
        return $this->container['join_date'];
    }

    /**
     * Sets join_date
     *
     * @param string $join_date The date the member first joined
     *
     * @return $this
     */
    public function setJoinDate($join_date)
    {
        $this->container['join_date'] = $join_date;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string $member_id The member's ID
     *
     * @return $this
     */
    public function setMemberId($member_id)
    {
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets member_type
     *
     * @return string
     */
    public function getMemberType()
    {
        return $this->container['member_type'];
    }

    /**
     * Sets member_type
     *
     * @param string $member_type The member's membership type
     *
     * @return $this
     */
    public function setMemberType($member_type)
    {
        $this->container['member_type'] = $member_type;

        return $this;
    }

    /**
     * Gets member_unit_id
     *
     * @return string
     */
    public function getMemberUnitId()
    {
        return $this->container['member_unit_id'];
    }

    /**
     * Sets member_unit_id
     *
     * @param string $member_unit_id The member's unit ID
     *
     * @return $this
     */
    public function setMemberUnitId($member_unit_id)
    {
        $this->container['member_unit_id'] = $member_unit_id;

        return $this;
    }

    /**
     * Gets most_recent_join_date
     *
     * @return string
     */
    public function getMostRecentJoinDate()
    {
        return $this->container['most_recent_join_date'];
    }

    /**
     * Sets most_recent_join_date
     *
     * @param string $most_recent_join_date The date the member last joined
     *
     * @return $this
     */
    public function setMostRecentJoinDate($most_recent_join_date)
    {
        $this->container['most_recent_join_date'] = $most_recent_join_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Swagger\Client\Model\InlineResponse2002Name
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Swagger\Client\Model\InlineResponse2002Name $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Swagger\Client\Model\InlineResponse2002Phones[]
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \Swagger\Client\Model\InlineResponse2002Phones[] $phones A list of member phone numbers
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \Swagger\Client\Model\InlineResponse2002Photos[]
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \Swagger\Client\Model\InlineResponse2002Photos[] $photos A list of member photos
     *
     * @return $this
     */
    public function setPhotos($photos)
    {
        $this->container['photos'] = $photos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


