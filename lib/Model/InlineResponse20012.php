<?php
/**
 * InlineResponse20012
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20012 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20012 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_12';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_id' => 'string',
        'order_date' => 'string',
        'payments' => '\Swagger\Client\Model\InlineResponse20012Payments[]',
        'one_time_fees' => '\Swagger\Client\Model\InlineResponse20012OneTimeFees[]',
        'recurring_fees' => '\Swagger\Client\Model\InlineResponse20012RecurringFees[]',
        'membership_type' => '\Swagger\Client\Model\InlineResponse20012MembershipType',
        'billing_cycle' => '\Swagger\Client\Model\InlineResponse20010BillingCycle',
        'next_draft_date' => 'string',
        'customer' => '\Swagger\Client\Model\InlineResponse20012Customer',
        'vendor' => '\Swagger\Client\Model\InlineResponse20012Vendor'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_id' => null,
        'order_date' => null,
        'payments' => null,
        'one_time_fees' => null,
        'recurring_fees' => null,
        'membership_type' => null,
        'billing_cycle' => null,
        'next_draft_date' => 'datetime',
        'customer' => null,
        'vendor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_id' => 'unit_id',
        'order_date' => 'order_date',
        'payments' => 'payments',
        'one_time_fees' => 'one_time_fees',
        'recurring_fees' => 'recurring_fees',
        'membership_type' => 'membership_type',
        'billing_cycle' => 'billing_cycle',
        'next_draft_date' => 'next_draft_date',
        'customer' => 'customer',
        'vendor' => 'vendor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_id' => 'setUnitId',
        'order_date' => 'setOrderDate',
        'payments' => 'setPayments',
        'one_time_fees' => 'setOneTimeFees',
        'recurring_fees' => 'setRecurringFees',
        'membership_type' => 'setMembershipType',
        'billing_cycle' => 'setBillingCycle',
        'next_draft_date' => 'setNextDraftDate',
        'customer' => 'setCustomer',
        'vendor' => 'setVendor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_id' => 'getUnitId',
        'order_date' => 'getOrderDate',
        'payments' => 'getPayments',
        'one_time_fees' => 'getOneTimeFees',
        'recurring_fees' => 'getRecurringFees',
        'membership_type' => 'getMembershipType',
        'billing_cycle' => 'getBillingCycle',
        'next_draft_date' => 'getNextDraftDate',
        'customer' => 'getCustomer',
        'vendor' => 'getVendor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['one_time_fees'] = isset($data['one_time_fees']) ? $data['one_time_fees'] : null;
        $this->container['recurring_fees'] = isset($data['recurring_fees']) ? $data['recurring_fees'] : null;
        $this->container['membership_type'] = isset($data['membership_type']) ? $data['membership_type'] : null;
        $this->container['billing_cycle'] = isset($data['billing_cycle']) ? $data['billing_cycle'] : null;
        $this->container['next_draft_date'] = isset($data['next_draft_date']) ? $data['next_draft_date'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_id'] === null) {
            $invalidProperties[] = "'unit_id' can't be null";
        }
        if ($this->container['order_date'] === null) {
            $invalidProperties[] = "'order_date' can't be null";
        }
        if ($this->container['payments'] === null) {
            $invalidProperties[] = "'payments' can't be null";
        }
        if ($this->container['one_time_fees'] === null) {
            $invalidProperties[] = "'one_time_fees' can't be null";
        }
        if ($this->container['recurring_fees'] === null) {
            $invalidProperties[] = "'recurring_fees' can't be null";
        }
        if ($this->container['membership_type'] === null) {
            $invalidProperties[] = "'membership_type' can't be null";
        }
        if ($this->container['billing_cycle'] === null) {
            $invalidProperties[] = "'billing_cycle' can't be null";
        }
        if ($this->container['next_draft_date'] === null) {
            $invalidProperties[] = "'next_draft_date' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['vendor'] === null) {
            $invalidProperties[] = "'vendor' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id Unit ID that was created (if joining) or the unit id that was renewed (if renewing).
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string $order_date Date/time the cart was checked out at (UTC)
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Swagger\Client\Model\InlineResponse20012Payments[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Swagger\Client\Model\InlineResponse20012Payments[] $payments A list of payments that have been made against the cart
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets one_time_fees
     *
     * @return \Swagger\Client\Model\InlineResponse20012OneTimeFees[]
     */
    public function getOneTimeFees()
    {
        return $this->container['one_time_fees'];
    }

    /**
     * Sets one_time_fees
     *
     * @param \Swagger\Client\Model\InlineResponse20012OneTimeFees[] $one_time_fees One time fees
     *
     * @return $this
     */
    public function setOneTimeFees($one_time_fees)
    {
        $this->container['one_time_fees'] = $one_time_fees;

        return $this;
    }

    /**
     * Gets recurring_fees
     *
     * @return \Swagger\Client\Model\InlineResponse20012RecurringFees[]
     */
    public function getRecurringFees()
    {
        return $this->container['recurring_fees'];
    }

    /**
     * Sets recurring_fees
     *
     * @param \Swagger\Client\Model\InlineResponse20012RecurringFees[] $recurring_fees Recurring fees
     *
     * @return $this
     */
    public function setRecurringFees($recurring_fees)
    {
        $this->container['recurring_fees'] = $recurring_fees;

        return $this;
    }

    /**
     * Gets membership_type
     *
     * @return \Swagger\Client\Model\InlineResponse20012MembershipType
     */
    public function getMembershipType()
    {
        return $this->container['membership_type'];
    }

    /**
     * Sets membership_type
     *
     * @param \Swagger\Client\Model\InlineResponse20012MembershipType $membership_type membership_type
     *
     * @return $this
     */
    public function setMembershipType($membership_type)
    {
        $this->container['membership_type'] = $membership_type;

        return $this;
    }

    /**
     * Gets billing_cycle
     *
     * @return \Swagger\Client\Model\InlineResponse20010BillingCycle
     */
    public function getBillingCycle()
    {
        return $this->container['billing_cycle'];
    }

    /**
     * Sets billing_cycle
     *
     * @param \Swagger\Client\Model\InlineResponse20010BillingCycle $billing_cycle billing_cycle
     *
     * @return $this
     */
    public function setBillingCycle($billing_cycle)
    {
        $this->container['billing_cycle'] = $billing_cycle;

        return $this;
    }

    /**
     * Gets next_draft_date
     *
     * @return string
     */
    public function getNextDraftDate()
    {
        return $this->container['next_draft_date'];
    }

    /**
     * Sets next_draft_date
     *
     * @param string $next_draft_date Date of the next draft of recurring fees
     *
     * @return $this
     */
    public function setNextDraftDate($next_draft_date)
    {
        $this->container['next_draft_date'] = $next_draft_date;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\InlineResponse20012Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\InlineResponse20012Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \Swagger\Client\Model\InlineResponse20012Vendor
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \Swagger\Client\Model\InlineResponse20012Vendor $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


