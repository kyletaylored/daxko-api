<?php
/**
 * Body17
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body17 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body17 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_17';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'member_id' => 'string',
        'program_id' => 'string',
        'offerings' => '\Swagger\Client\Model\V3cartscartIdofferingsOfferings[]',
        'registration_type' => 'string',
        'dry_run' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'member_id' => null,
        'program_id' => null,
        'offerings' => null,
        'registration_type' => null,
        'dry_run' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member_id' => 'member_id',
        'program_id' => 'program_id',
        'offerings' => 'offerings',
        'registration_type' => 'registration_type',
        'dry_run' => 'dry_run'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member_id' => 'setMemberId',
        'program_id' => 'setProgramId',
        'offerings' => 'setOfferings',
        'registration_type' => 'setRegistrationType',
        'dry_run' => 'setDryRun'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member_id' => 'getMemberId',
        'program_id' => 'getProgramId',
        'offerings' => 'getOfferings',
        'registration_type' => 'getRegistrationType',
        'dry_run' => 'getDryRun'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REGISTRATION_TYPE_IN_HOUSE = 'in_house';
    const REGISTRATION_TYPE_ONLINE = 'online';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegistrationTypeAllowableValues()
    {
        return [
            self::REGISTRATION_TYPE_IN_HOUSE,
            self::REGISTRATION_TYPE_ONLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['member_id'] = isset($data['member_id']) ? $data['member_id'] : null;
        $this->container['program_id'] = isset($data['program_id']) ? $data['program_id'] : null;
        $this->container['offerings'] = isset($data['offerings']) ? $data['offerings'] : null;
        $this->container['registration_type'] = isset($data['registration_type']) ? $data['registration_type'] : null;
        $this->container['dry_run'] = isset($data['dry_run']) ? $data['dry_run'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['member_id'] === null) {
            $invalidProperties[] = "'member_id' can't be null";
        }
        if ($this->container['program_id'] === null) {
            $invalidProperties[] = "'program_id' can't be null";
        }
        if ($this->container['offerings'] === null) {
            $invalidProperties[] = "'offerings' can't be null";
        }
        if ($this->container['registration_type'] === null) {
            $invalidProperties[] = "'registration_type' can't be null";
        }
        $allowedValues = $this->getRegistrationTypeAllowableValues();
        if (!is_null($this->container['registration_type']) && !in_array($this->container['registration_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'registration_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member_id
     *
     * @return string
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string $member_id The member being registered
     *
     * @return $this
     */
    public function setMemberId($member_id)
    {
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return string
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param string $program_id The Program ID for the offering being added to the cart
     *
     * @return $this
     */
    public function setProgramId($program_id)
    {
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets offerings
     *
     * @return \Swagger\Client\Model\V3cartscartIdofferingsOfferings[]
     */
    public function getOfferings()
    {
        return $this->container['offerings'];
    }

    /**
     * Sets offerings
     *
     * @param \Swagger\Client\Model\V3cartscartIdofferingsOfferings[] $offerings List of offerings for registration
     *
     * @return $this
     */
    public function setOfferings($offerings)
    {
        $this->container['offerings'] = $offerings;

        return $this;
    }

    /**
     * Gets registration_type
     *
     * @return string
     */
    public function getRegistrationType()
    {
        return $this->container['registration_type'];
    }

    /**
     * Sets registration_type
     *
     * @param string $registration_type Specifies the type of registration (we currently only support `online`)
     *
     * @return $this
     */
    public function setRegistrationType($registration_type)
    {
        $allowedValues = $this->getRegistrationTypeAllowableValues();
        if (!in_array($registration_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'registration_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['registration_type'] = $registration_type;

        return $this;
    }

    /**
     * Gets dry_run
     *
     * @return bool
     */
    public function getDryRun()
    {
        return $this->container['dry_run'];
    }

    /**
     * Sets dry_run
     *
     * @param bool $dry_run When set to true, will only run the validation and not actually add to cart.
     *
     * @return $this
     */
    public function setDryRun($dry_run)
    {
        $this->container['dry_run'] = $dry_run;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


