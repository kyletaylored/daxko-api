<?php
/**
 * V3membershipcartIdcheckoutPaymentInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V3membershipcartIdcheckoutPaymentInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V3membershipcartIdcheckoutPaymentInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v3membershipcart_idcheckout_payment_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_method_amount' => 'float',
        'apply_system_credit_amount' => 'float',
        'billing_method' => '\Swagger\Client\Model\V3membershipcartIdcheckoutBillingMethod',
        'line_item_payments' => '\Swagger\Client\Model\V3membershipcartIdcheckoutLineItemPayments[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_method_amount' => null,
        'apply_system_credit_amount' => null,
        'billing_method' => null,
        'line_item_payments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_method_amount' => 'payment_method_amount',
        'apply_system_credit_amount' => 'apply_system_credit_amount',
        'billing_method' => 'billing_method',
        'line_item_payments' => 'line_item_payments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_method_amount' => 'setPaymentMethodAmount',
        'apply_system_credit_amount' => 'setApplySystemCreditAmount',
        'billing_method' => 'setBillingMethod',
        'line_item_payments' => 'setLineItemPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_method_amount' => 'getPaymentMethodAmount',
        'apply_system_credit_amount' => 'getApplySystemCreditAmount',
        'billing_method' => 'getBillingMethod',
        'line_item_payments' => 'getLineItemPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_method_amount'] = isset($data['payment_method_amount']) ? $data['payment_method_amount'] : null;
        $this->container['apply_system_credit_amount'] = isset($data['apply_system_credit_amount']) ? $data['apply_system_credit_amount'] : null;
        $this->container['billing_method'] = isset($data['billing_method']) ? $data['billing_method'] : null;
        $this->container['line_item_payments'] = isset($data['line_item_payments']) ? $data['line_item_payments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_method_amount'] === null) {
            $invalidProperties[] = "'payment_method_amount' can't be null";
        }
        if ($this->container['line_item_payments'] === null) {
            $invalidProperties[] = "'line_item_payments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_method_amount
     *
     * @return float
     */
    public function getPaymentMethodAmount()
    {
        return $this->container['payment_method_amount'];
    }

    /**
     * Sets payment_method_amount
     *
     * @param float $payment_method_amount Amount that is being paid from the specified payment method (i.e., $100 is being paid by a VISA payment method)
     *
     * @return $this
     */
    public function setPaymentMethodAmount($payment_method_amount)
    {
        $this->container['payment_method_amount'] = $payment_method_amount;

        return $this;
    }

    /**
     * Gets apply_system_credit_amount
     *
     * @return float
     */
    public function getApplySystemCreditAmount()
    {
        return $this->container['apply_system_credit_amount'];
    }

    /**
     * Sets apply_system_credit_amount
     *
     * @param float $apply_system_credit_amount If system credit is available on the account, this is the amount that is being paid from available system credit.
     *
     * @return $this
     */
    public function setApplySystemCreditAmount($apply_system_credit_amount)
    {
        $this->container['apply_system_credit_amount'] = $apply_system_credit_amount;

        return $this;
    }

    /**
     * Gets billing_method
     *
     * @return \Swagger\Client\Model\V3membershipcartIdcheckoutBillingMethod
     */
    public function getBillingMethod()
    {
        return $this->container['billing_method'];
    }

    /**
     * Sets billing_method
     *
     * @param \Swagger\Client\Model\V3membershipcartIdcheckoutBillingMethod $billing_method billing_method
     *
     * @return $this
     */
    public function setBillingMethod($billing_method)
    {
        $this->container['billing_method'] = $billing_method;

        return $this;
    }

    /**
     * Gets line_item_payments
     *
     * @return \Swagger\Client\Model\V3membershipcartIdcheckoutLineItemPayments[]
     */
    public function getLineItemPayments()
    {
        return $this->container['line_item_payments'];
    }

    /**
     * Sets line_item_payments
     *
     * @param \Swagger\Client\Model\V3membershipcartIdcheckoutLineItemPayments[] $line_item_payments This is a mapping of how much of the total payment amount (`payment_method_amount` + `apply_system_credit_amount`) is applied to each line item.  The sum of all `line_item_payments.amount` must equal (`payment_method_amount` + `apply_system_credit_amount`).  An entry is required for each line item even if applying $0.
     *
     * @return $this
     */
    public function setLineItemPayments($line_item_payments)
    {
        $this->container['line_item_payments'] = $line_item_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


