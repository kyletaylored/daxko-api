<?php
/**
 * InlineResponse20037LineItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20037LineItems Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20037LineItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_37_line_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_item_id' => 'string',
        'type' => 'string',
        'description' => 'string',
        'short_description' => 'string',
        'level1' => 'string',
        'level2' => 'string',
        'level3' => 'string',
        'level4' => 'string',
        'unit_price' => 'float',
        'quantity' => 'float',
        'extended_price' => 'float',
        'due_date' => 'string',
        'payment_amount' => 'float',
        'scheduled_amount' => 'float',
        'discounts' => '\Swagger\Client\Model\InlineResponse20030Discounts[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_item_id' => null,
        'type' => null,
        'description' => null,
        'short_description' => null,
        'level1' => null,
        'level2' => null,
        'level3' => null,
        'level4' => null,
        'unit_price' => null,
        'quantity' => null,
        'extended_price' => null,
        'due_date' => 'datetime',
        'payment_amount' => null,
        'scheduled_amount' => null,
        'discounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_item_id' => 'line_item_id',
        'type' => 'type',
        'description' => 'description',
        'short_description' => 'short_description',
        'level1' => 'level1',
        'level2' => 'level2',
        'level3' => 'level3',
        'level4' => 'level4',
        'unit_price' => 'unit_price',
        'quantity' => 'quantity',
        'extended_price' => 'extended_price',
        'due_date' => 'due_date',
        'payment_amount' => 'payment_amount',
        'scheduled_amount' => 'scheduled_amount',
        'discounts' => 'discounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_item_id' => 'setLineItemId',
        'type' => 'setType',
        'description' => 'setDescription',
        'short_description' => 'setShortDescription',
        'level1' => 'setLevel1',
        'level2' => 'setLevel2',
        'level3' => 'setLevel3',
        'level4' => 'setLevel4',
        'unit_price' => 'setUnitPrice',
        'quantity' => 'setQuantity',
        'extended_price' => 'setExtendedPrice',
        'due_date' => 'setDueDate',
        'payment_amount' => 'setPaymentAmount',
        'scheduled_amount' => 'setScheduledAmount',
        'discounts' => 'setDiscounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_item_id' => 'getLineItemId',
        'type' => 'getType',
        'description' => 'getDescription',
        'short_description' => 'getShortDescription',
        'level1' => 'getLevel1',
        'level2' => 'getLevel2',
        'level3' => 'getLevel3',
        'level4' => 'getLevel4',
        'unit_price' => 'getUnitPrice',
        'quantity' => 'getQuantity',
        'extended_price' => 'getExtendedPrice',
        'due_date' => 'getDueDate',
        'payment_amount' => 'getPaymentAmount',
        'scheduled_amount' => 'getScheduledAmount',
        'discounts' => 'getDiscounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_REG_FEE = 'reg_fee';
    const TYPE_QUESTION_FEE = 'question_fee';
    const TYPE_INST = 'inst';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REG_FEE,
            self::TYPE_QUESTION_FEE,
            self::TYPE_INST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_item_id'] = isset($data['line_item_id']) ? $data['line_item_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['level1'] = isset($data['level1']) ? $data['level1'] : null;
        $this->container['level2'] = isset($data['level2']) ? $data['level2'] : null;
        $this->container['level3'] = isset($data['level3']) ? $data['level3'] : null;
        $this->container['level4'] = isset($data['level4']) ? $data['level4'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['extended_price'] = isset($data['extended_price']) ? $data['extended_price'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['payment_amount'] = isset($data['payment_amount']) ? $data['payment_amount'] : null;
        $this->container['scheduled_amount'] = isset($data['scheduled_amount']) ? $data['scheduled_amount'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line_item_id'] === null) {
            $invalidProperties[] = "'line_item_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['short_description'] === null) {
            $invalidProperties[] = "'short_description' can't be null";
        }
        if ($this->container['level1'] === null) {
            $invalidProperties[] = "'level1' can't be null";
        }
        if ($this->container['level2'] === null) {
            $invalidProperties[] = "'level2' can't be null";
        }
        if ($this->container['level3'] === null) {
            $invalidProperties[] = "'level3' can't be null";
        }
        if ($this->container['level4'] === null) {
            $invalidProperties[] = "'level4' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['extended_price'] === null) {
            $invalidProperties[] = "'extended_price' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['payment_amount'] === null) {
            $invalidProperties[] = "'payment_amount' can't be null";
        }
        if ($this->container['scheduled_amount'] === null) {
            $invalidProperties[] = "'scheduled_amount' can't be null";
        }
        if ($this->container['discounts'] === null) {
            $invalidProperties[] = "'discounts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_item_id
     *
     * @return string
     */
    public function getLineItemId()
    {
        return $this->container['line_item_id'];
    }

    /**
     * Sets line_item_id
     *
     * @param string $line_item_id The line item ID.
     *
     * @return $this
     */
    public function setLineItemId($line_item_id)
    {
        $this->container['line_item_id'] = $line_item_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The line item type. A description of each type is detailed in the table below. |type|description| |-|-| |reg_fee|Registration Fee| |question_fee|Question Fee| |inst|Instance Fee|
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The line item full description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description The line item short description.
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets level1
     *
     * @return string
     */
    public function getLevel1()
    {
        return $this->container['level1'];
    }

    /**
     * Sets level1
     *
     * @param string $level1 The line item first-level grouping. This is only used for display purposes.
     *
     * @return $this
     */
    public function setLevel1($level1)
    {
        $this->container['level1'] = $level1;

        return $this;
    }

    /**
     * Gets level2
     *
     * @return string
     */
    public function getLevel2()
    {
        return $this->container['level2'];
    }

    /**
     * Sets level2
     *
     * @param string $level2 The line item second-level grouping. This is only used for display purposes.
     *
     * @return $this
     */
    public function setLevel2($level2)
    {
        $this->container['level2'] = $level2;

        return $this;
    }

    /**
     * Gets level3
     *
     * @return string
     */
    public function getLevel3()
    {
        return $this->container['level3'];
    }

    /**
     * Sets level3
     *
     * @param string $level3 The line item third-level grouping. This is only used for display purposes.
     *
     * @return $this
     */
    public function setLevel3($level3)
    {
        $this->container['level3'] = $level3;

        return $this;
    }

    /**
     * Gets level4
     *
     * @return string
     */
    public function getLevel4()
    {
        return $this->container['level4'];
    }

    /**
     * Sets level4
     *
     * @param string $level4 The line item fourth-level grouping. This is only used for display purposes.
     *
     * @return $this
     */
    public function setLevel4($level4)
    {
        $this->container['level4'] = $level4;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float $unit_price The line item price per unit.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity The line item quantity.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets extended_price
     *
     * @return float
     */
    public function getExtendedPrice()
    {
        return $this->container['extended_price'];
    }

    /**
     * Sets extended_price
     *
     * @param float $extended_price The price for all quantities. Equal to `quantity` * `unit_price`.
     *
     * @return $this
     */
    public function setExtendedPrice($extended_price)
    {
        $this->container['extended_price'] = $extended_price;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date The date when the `min_payment_amount` is due.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return float
     */
    public function getPaymentAmount()
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param float $payment_amount The amount that will be paid by the payment method.
     *
     * @return $this
     */
    public function setPaymentAmount($payment_amount)
    {
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets scheduled_amount
     *
     * @return float
     */
    public function getScheduledAmount()
    {
        return $this->container['scheduled_amount'];
    }

    /**
     * Sets scheduled_amount
     *
     * @param float $scheduled_amount The balance amount due after `discounts`, system credits, and `payment_amount` that was scheduled for the future.
     *
     * @return $this
     */
    public function setScheduledAmount($scheduled_amount)
    {
        $this->container['scheduled_amount'] = $scheduled_amount;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Swagger\Client\Model\InlineResponse20030Discounts[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Swagger\Client\Model\InlineResponse20030Discounts[] $discounts A list of discounts applied to the line item.
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


