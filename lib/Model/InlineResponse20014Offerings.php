<?php
/**
 * InlineResponse20014Offerings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Daxko Operations API
 *
 * description
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@daxko.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20014Offerings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20014Offerings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_14_offerings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'start' => '\DateTime',
        'end' => '\DateTime',
        'locations' => '\Swagger\Client\Model\InlineResponse20014Locations[]',
        'availability' => '\Swagger\Client\Model\InlineResponse20014Availability',
        'groups' => '\Swagger\Client\Model\InlineResponse20014Groups[]',
        'restrictions' => '\Swagger\Client\Model\InlineResponse20014Restrictions',
        'days_offered' => '\Swagger\Client\Model\InlineResponse20014DaysOffered[]',
        'times' => '\Swagger\Client\Model\InlineResponse20014Times[]',
        'registration' => '\Swagger\Client\Model\InlineResponse20013Registration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'start' => 'date',
        'end' => 'date',
        'locations' => null,
        'availability' => null,
        'groups' => null,
        'restrictions' => null,
        'days_offered' => null,
        'times' => null,
        'registration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'start' => 'start',
        'end' => 'end',
        'locations' => 'locations',
        'availability' => 'availability',
        'groups' => 'groups',
        'restrictions' => 'restrictions',
        'days_offered' => 'days_offered',
        'times' => 'times',
        'registration' => 'registration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'start' => 'setStart',
        'end' => 'setEnd',
        'locations' => 'setLocations',
        'availability' => 'setAvailability',
        'groups' => 'setGroups',
        'restrictions' => 'setRestrictions',
        'days_offered' => 'setDaysOffered',
        'times' => 'setTimes',
        'registration' => 'setRegistration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'start' => 'getStart',
        'end' => 'getEnd',
        'locations' => 'getLocations',
        'availability' => 'getAvailability',
        'groups' => 'getGroups',
        'restrictions' => 'getRestrictions',
        'days_offered' => 'getDaysOffered',
        'times' => 'getTimes',
        'registration' => 'getRegistration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['days_offered'] = isset($data['days_offered']) ? $data['days_offered'] : null;
        $this->container['times'] = isset($data['times']) ? $data['times'] : null;
        $this->container['registration'] = isset($data['registration']) ? $data['registration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['end'] === null) {
            $invalidProperties[] = "'end' can't be null";
        }
        if ($this->container['locations'] === null) {
            $invalidProperties[] = "'locations' can't be null";
        }
        if ($this->container['availability'] === null) {
            $invalidProperties[] = "'availability' can't be null";
        }
        if ($this->container['groups'] === null) {
            $invalidProperties[] = "'groups' can't be null";
        }
        if ($this->container['restrictions'] === null) {
            $invalidProperties[] = "'restrictions' can't be null";
        }
        if ($this->container['days_offered'] === null) {
            $invalidProperties[] = "'days_offered' can't be null";
        }
        if ($this->container['times'] === null) {
            $invalidProperties[] = "'times' can't be null";
        }
        if ($this->container['registration'] === null) {
            $invalidProperties[] = "'registration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Offering ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Offering name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Offering description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start Offering start date
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end Offering end date
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Swagger\Client\Model\InlineResponse20014Locations[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Swagger\Client\Model\InlineResponse20014Locations[] $locations Offering locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \Swagger\Client\Model\InlineResponse20014Availability
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \Swagger\Client\Model\InlineResponse20014Availability $availability availability
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Swagger\Client\Model\InlineResponse20014Groups[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Swagger\Client\Model\InlineResponse20014Groups[] $groups Program fee groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \Swagger\Client\Model\InlineResponse20014Restrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \Swagger\Client\Model\InlineResponse20014Restrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets days_offered
     *
     * @return \Swagger\Client\Model\InlineResponse20014DaysOffered[]
     */
    public function getDaysOffered()
    {
        return $this->container['days_offered'];
    }

    /**
     * Sets days_offered
     *
     * @param \Swagger\Client\Model\InlineResponse20014DaysOffered[] $days_offered Days that the offering is available on.  If the array is empty, this does not necessarily mean that the offering is not available on this day, it means that when the program was set up, this option was not set.
     *
     * @return $this
     */
    public function setDaysOffered($days_offered)
    {
        $this->container['days_offered'] = $days_offered;

        return $this;
    }

    /**
     * Gets times
     *
     * @return \Swagger\Client\Model\InlineResponse20014Times[]
     */
    public function getTimes()
    {
        return $this->container['times'];
    }

    /**
     * Sets times
     *
     * @param \Swagger\Client\Model\InlineResponse20014Times[] $times Times that the offering is available.  The date portion is always returned as 1900-01-01.  For example, 1900-01-01T08:00:00.0000000 means that the offering starts at 8:00 AM local time.
     *
     * @return $this
     */
    public function setTimes($times)
    {
        $this->container['times'] = $times;

        return $this;
    }

    /**
     * Gets registration
     *
     * @return \Swagger\Client\Model\InlineResponse20013Registration
     */
    public function getRegistration()
    {
        return $this->container['registration'];
    }

    /**
     * Sets registration
     *
     * @param \Swagger\Client\Model\InlineResponse20013Registration $registration registration
     *
     * @return $this
     */
    public function setRegistration($registration)
    {
        $this->container['registration'] = $registration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


